#!/usr/bin/env node
'use strict';

var program = require('commander'),
    path = require('path'),
    pkg = require('../package.json');

var readDir = require('fs-readdir-recursive');

var Doxydoc = require('../modules/doxydoc');

program.version(pkg.version)
    .usage('[options] file1, files2, ...')
    .option('-o, --output <dir>', 'Write output to <dir>')
    .option('-t, --template-dir <dir>', 'Use your own templates')
    .option('-f, --docu-filename <filename>', 'Sets a custom filename for the generated docu file')
    .option('-d, --doxydoc-file <filename>', 'Read configuration from <file> instead of doxydoc.json')
    .option('-D, --data-file <filename>', 'Loads a custom datafile')
    .option('-w, --working-dir <dir>', 'Sets a working dir')
    // .option('-c, --check', 'Checks documentation in <input> dir')
    .option('-r, --recursive', 'Traverse <input> recursive')
    .option('-l, --filter=<filter>', 'Files must match filter. --filter=*.js,*.css')
    .option('-v, --verbose', 'Enables logging')
    .parse(process.argv);

var conf = {
    output: program.output,
    templateDir: program.templateDir,
    docuFilename: program.docuFilename ? path.resolve(process.cwd(), program.docuFilename) : null,
    workingDir: program.workingDir ? path.resolve(process.cwd(), program.workingDir) : process.cwd(),
    doxydocFile: program.doxydocFile ? path.resolve(process.cwd(), program.doxydocFile) : null,
    dataFile: program.dataFile ? path.resolve(process.cwd(), program.dataFile) : null,
    verbose: program.verbose
};

var files = [];
if (program.recursive) {
    program.args.forEach(function(dir) {
        dir = path.join(process.cwd(), dir);
        files = files.concat(readDir(dir));
    });

    if (program.filter) {
        var reg = program.filter
            .replace(/,/g, '|')
            .replace(/./g, '\.')
            .replace(/\*/g, '.+');
        reg = new RegExp(reg);
    }
}
else {
    files = program.args;
}

var doxydoc = new Doxydoc(conf);
if (files.length) {
    doxydoc.docs = [{
        files: files,
        output: program.docuFilename || 'docs.html'
    }];
}

doxydoc.create().then(function(result) {
    console.log('------------------------------------');
    // console.log(JSON.stringify(result, null, '  '));
}).catch(function(err) {
   console.error(err.stack);
   process.exit(1); 
});





// if (program.check) {
//     var doxydocPage = new DoxyDocPage({
//         templateDir: program.template,
//         docuFilename: program.docuFilename,
//         doxydocFile: program.doxydocFile
//     });

//     doxydocPage.createDocu('json', files);
//     doxydocPage.showModuleTree();
// }
// else {
//     var doxydocPage = new DoxyDocPage({
//         templateDir: program.template,
//         output: program.output,
//         docuFilename: program.docuFilename,
//         doxydocFile: program.doxydocFile
//     });

//     if (program.output) {
//         doxydocPage.verbose = true;
//         doxydocPage.files = files;
//         doxydocPage.createPages();
//     }
//     else {
//         console.log(doxydocPage.createDocu('json', files));
//     }
// }
